#!/bin/bash

# make bash behave
set -euo pipefail
IFS=$'\n\t'

# constants
stdout=1
stderr=2
success=0
failure=1
badusage=64

builddir=$(pwd)

# outputs usage message on specified device before exiting with provided status
usage() {
    cat << 'E_O_USAGE' >&"$1"
usage: fetch_and_build_pgxn project build_type build_directory

    project : 'citus'
    build_type: 'release'

fetch_and_build_pgxn builds a PGXN package for a specified project. The build
type 'release' builds the latest release tag. At present, the only supported
build is a 'release' build of the 'citus' project.
E_O_USAGE

    exit "${2}";
}

if [ "$#" -eq 1 ] && [ "${1}" = '-h' ]; then
    usage $stdout $success
fi

if [ "$#" -ne 2 ]; then
    usage $stderr $badusage
fi

case "${1}" in
    citus)
        project=${1}
        packagename='citus'
        ;;
    *)
        echo "$0: unknown project -- ${1}" >&2
        usage $stderr $badusage
        ;;
esac

echo "header=\"Authorization: token ${GITHUB_TOKEN}\"" > ~/.curlrc

fetch_build_files "${project}" pgxn "${builddir}"

latest=$(parse_latest_release "${project}" pgxn "${builddir}")
repopath=$(parse_repo_path "${project}" pgxn "${builddir}")

case "${2}" in
    release)
        packageversion=${latest%-*}
        releasetag="v${packageversion/'~'/-}"

        gitsha=$(curl -s "https://api.github.com/repos/${repopath}/git/refs/tags/${releasetag}" | \
                 jq -r '.object.sha')
        if [ "${gitsha}" == 'null' ]; then
            echo "$0: could not determine commit for git tag ${releasetag}" >&2
            exit $failure
        fi

        verified=$(curl -sH 'Accept:application/vnd.github.cryptographer-preview+sha' \
                   "https://api.github.com/repos/${repopath}/git/tags/${gitsha}" | \
                   jq -r '.verification.verified')
        if [ "${verified}" != 'true' ]; then
            echo "$0: could not verify signature for git tag ${releasetag}" >&2
            exit $failure
        fi
        ;;
    *)
        echo "$0: unknown build_type -- ${2}" >&2
        usage $stderr $badusage
        ;;
esac

tarballpath="${builddir}/${packagename}_${packageversion}.orig.tar.gz"
packagepath="${builddir}/${packagename}-${packageversion}"
finalpath="${packagepath}.tar.gz"

curl -sL "https://api.github.com/repos/${repopath}/tarball/${gitsha}" \
     -o "${tarballpath}"

mkdir -p "${packagepath}"
tar xf "${tarballpath}" -C "${packagepath}" --strip-components 1

cp "${builddir}/META.json" "${packagepath}/META.json"

tar czf "${finalpath}" "${packagepath}"

cp ${finalpath} /packages
