#!/bin/bash

# make bash behave
set -euo pipefail
set -x
IFS=$'\n\t'

# constants
stdout=1
stderr=2
success=0
failure=1
badusage=64

nextversion='0.0.0'
builddir=$(pwd)

# outputs usage message on specified device before exiting with provided status
usage() {
	cat << 'E_O_USAGE' >&"$1"
usage: fetch_and_build_rpm project build_type build_directory

    project : 'citus', 'enterprise', or 'rebalancer'
    build_type: 'release', 'nightly', or a valid git reference

fetch_and_build_rpm builds Red Hat packages for a specified project. The build
type 'release' builds the latest release tag, 'nightly' builds a nightly from
the latest 'master' commit, and any other type is interpreted as a git ref to
facilitate building one-off packages for customers.
E_O_USAGE

	exit "${2}";
}

# sets the next version variable used during non-release builds
setnextversion() {
    baseversion=$(echo "$1" | tr '~' '-' | cut -d- -f1)
    nextversion=$(echo "$baseversion" | perl -pe 's/^(\d+\.)(\d+)(\.\d+)$/$1.($2+1).".0"/e')
}

if [ "$#" -eq 1 ] && [ "${1}" = '-h' ]; then
	usage $stdout $success
fi

if [ "$#" -ne 2 ]; then
	usage $stderr $badusage
fi

case "${1}" in
    citus)
        project=${1}
        packagename='citus'
        ;;
    enterprise)
        project=${1}
        packagename='citus-enterprise'
        ;;
    rebalancer)
        project=${1}
        packagename='citus-rebalancer'
        ;;
    *)
		echo "$0: unknown project -- ${1}" >&2
		usage $stderr $badusage
		;;
esac

echo "header=\"Authorization: token ${GITHUB_TOKEN}\"" > ~/.curlrc

fetch_build_files "${project}" rpm "${builddir}"

latest=$(parse_latest_release "${project}" rpm "${builddir}")
repopath=$(parse_repo_path "${project}" rpm "${builddir}")

case "${2}" in
    release)
        packageversion=${latest%-*}
        packagerelease=$(echo "${latest#*-}" | sed -E 's/^[0-9.]+//')

        if [ -z "${packagerelease}" ]; then
            releasetag="v${packageversion}"
        else
            releasetag="v${packageversion}-${packagerelease}"
        fi

        gitsha=$(curl -s "https://api.github.com/repos/${repopath}/git/refs/tags/${releasetag}" | \
                 jq -r '.object.sha')
        if [ "${gitsha}" == 'null' ]; then
        	echo "$0: could not determine commit for git tag ${releasetag}" >&2
            exit $failure
        fi

        verified=$(curl -sH 'Accept:application/vnd.github.cryptographer-preview+sha' \
                   "https://api.github.com/repos/${repopath}/git/tags/${gitsha}" | \
                   jq -r '.verification.verified')
        if [ "${verified}" != 'true' ]; then
        	echo "$0: could not verify signature for git tag ${releasetag}" >&2
            exit $failure
        fi
        ;;
    *)
        if [ "${2}" == 'nightly' ]; then
            if [ "${project}" == 'enterprise' ]; then
                ref='enterprise-master'
            else
                ref='master'
            fi
            infix='git'
        else
            ref=${2}
            infix='pre'
        fi

        setnextversion "$latest"

        set +e
        gitsha=$(curl -sfH 'Accept:application/vnd.github.v3.sha' \
                 "https://api.github.com/repos/${repopath}/commits/${ref}")
        if [ "${?}" -ne 0 ]; then
        	echo "$0: could not determine commit for git ref ${ref}" >&2
            exit $failure
        fi
        set -e

        packageversion="${nextversion}"
        timestamp=$(date +'%Y%m%d')
        packagerelease="0.0.${infix}.${timestamp}.${gitsha:0:7}"

        sed -i -E -e "/^Version:/s/[^ \\t]*$/${packageversion}/" \
                  -e "/^Release:/s/[^ \\t]*$/${packagerelease}%{dist}/" \
            "${builddir}/${packagename}.spec"
        ;;
esac

# this should all take place in a package-build directory
rpmbuilddir="${builddir}/citus-rpm-build"
mkdir -p "${rpmbuilddir}"

pkgsrcdir="${builddir}/${packagename}-${packageversion}"
mkdir "${pkgsrcdir}"

download=$(mktemp)
tarballurl="https://api.github.com/repos/${repopath}/tarball/${gitsha}"
curl -sL "${tarballurl}" -o "${download}"

tarballpath="${rpmbuilddir}/${gitsha}"
tar xf "${download}" -C "${pkgsrcdir}" --strip-components 1
tar czf "${tarballpath}" "${pkgsrcdir}"

# force our URL and expanded folder names into spec
sed -i -E -e "\\|^Source0:|s|https:.*|${tarballurl}|" \
          -e "/^%global pgmajorversion/s/[0-9]+$/${PGVERSION//'.'/}/" \
          -e "/^%global pgpackageversion/s/[0-9.]+$/${PGVERSION}/" \
    "${builddir}/${packagename}.spec"

osname=$(awk '{print $1}' /etc/system-release)
if [ "${osname}" == 'Oracle' ]; then
    locale='C'
else
    locale='en_US.utf8'
fi

case "${2}" in
    release)
        # nothing to do
        ;;
    nightly)
        msg="Nightly package. Built from master "
        msg+=$(date +'on %l:%M %p (%Z) on %A, %B %Y' | tr -s ' ')
        LC_ALL=${locale} rpmdev-bumpspec -c "${msg}" "${builddir}/${packagename}.spec"
        sed -i -E 's/0.1.git/0.0.git/' "${builddir}/${packagename}.spec"
        ;;
    *)
        msg="Custom package. Built from ${gitsha:0:7} "
        msg+=$(date +'on %l:%M %p (%Z) on %A, %B %Y' | tr -s ' ')
        LC_ALL=${locale} rpmdev-bumpspec -c "${msg}" "${builddir}/${packagename}.spec"
        sed -i -E 's/0.1.git/0.0.pre/' "${builddir}/${packagename}.spec"
        ;;
esac

rpmbuild --define "_sourcedir ${rpmbuilddir}" \
--define "_specdir ${rpmbuilddir}" \
--define "_builddir ${rpmbuilddir}" \
--define "_srcrpmdir ${rpmbuilddir}" \
--define "_rpmdir ${rpmbuilddir}" \
-bb "${builddir}/${packagename}.spec"

cp /citus-rpm-build/x86_64/*.rpm /packages
